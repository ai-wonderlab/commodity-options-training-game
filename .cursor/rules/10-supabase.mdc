# Supabase Configuration Rules

## Environment Setup

### Required Environment Variables
```bash
NEXT_PUBLIC_SUPABASE_URL=https://[PROJECT].supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=[anon-key]
SUPABASE_SERVICE_ROLE_KEY=[service-role-key]  # NEVER commit this
SUPABASE_ACCESS_TOKEN=[access-token]
SUPABASE_PROJECT_REF=[project-ref]
DATABASE_URL=postgresql://postgres:[password]@db.[project].supabase.co:5432/postgres
```

### CLI Commands
```bash
# Link to project (run from project root)
npx supabase link --project-ref [PROJECT_REF]

# Push migrations
npx supabase db push

# Deploy functions
npx supabase functions deploy [function-name]
# Or deploy all
npx supabase functions deploy

# Set secrets
npx supabase secrets set --env-file .env.local

# Local development
npx supabase start  # Start local Supabase
npx supabase stop   # Stop local Supabase
```

## Database Schema

### Core Tables
- `sessions` - Trading sessions configuration
- `participants` - Session participants
- `orders` - All orders (pending/filled/cancelled)
- `positions` - Current positions per participant
- `greek_snapshots` - Greeks history for risk tracking
- `breach_events` - Risk limit breaches
- `leaderboard` - Real-time scores
- `ticks` - Market data history
- `iv_surface_snapshots` - Volatility surface history

### RLS Policies
```sql
-- Always enable RLS
ALTER TABLE table_name ENABLE ROW LEVEL SECURITY;

-- Participants see own data
CREATE POLICY "Own data only" ON table_name
  FOR SELECT USING (auth.uid() = participant_id);

-- Instructors see all session data
CREATE POLICY "Instructor access" ON table_name
  FOR ALL USING (
    auth.uid() IN (
      SELECT instructor_id FROM sessions WHERE id = session_id
    )
  );

-- Service role has full access
CREATE POLICY "Service role" ON table_name
  FOR ALL USING (auth.role() = 'service_role');
```

## Edge Functions

### Structure
```typescript
// supabase/functions/[function-name]/index.ts
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts'
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2'
import { corsHeaders } from '../_shared/cors.ts'

serve(async (req) => {
  // Handle CORS
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    // Create Supabase client with service role
    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? '',
      { auth: { persistSession: false } }
    )

    // Parse request
    const { sessionId, participantId, ...data } = await req.json()

    // Validate auth
    const authHeader = req.headers.get('Authorization')!
    const token = authHeader.replace('Bearer ', '')
    const { data: { user } } = await supabaseClient.auth.getUser(token)
    
    if (!user) throw new Error('Unauthorized')

    // Your logic here
    
    return new Response(
      JSON.stringify({ success: true, data: result }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  } catch (error) {
    return new Response(
      JSON.stringify({ error: error.message }),
      { status: 400, headers: { ...corsHeaders, 'Content-Type': 'application/json' } }
    )
  }
})
```

### Deployment
```bash
# Deploy single function
npx supabase functions deploy order-submit

# Deploy with secrets
npx supabase functions deploy order-submit --no-verify-jwt

# Test locally
npx supabase functions serve order-submit --env-file .env.local
```

## Realtime Channels

### Channel Structure
```typescript
// Channel naming: session:{sessionId}
const channel = supabase
  .channel(`session:${sessionId}`)
  .on('broadcast', { event: 'tick' }, (payload) => {
    // Handle market tick
  })
  .on('broadcast', { event: 'fill' }, (payload) => {
    // Handle order fill
  })
  .on('broadcast', { event: 'risk' }, (payload) => {
    // Handle risk update
  })
  .subscribe()

// Broadcasting from Edge Function
await supabaseClient
  .channel(`session:${sessionId}`)
  .send({
    type: 'broadcast',
    event: 'tick',
    payload: { price, timestamp }
  })
```

### Event Types
- `TICK` - Market data updates
- `FILL` - Order executions
- `RISK` - Greek/VaR updates
- `SCORE` - Leaderboard changes
- `ALERT` - Risk breaches
- `SHOCK` - Instructor market shocks

## Best Practices

### Security
- NEVER commit service role key
- Always validate JWT in Edge Functions
- Use RLS for all tables
- Sanitize all inputs
- Rate limit API calls

### Performance
- Use prepared statements
- Batch inserts when possible
- Index foreign keys
- Limit realtime subscriptions
- Clean up old data periodically

### Error Handling
```typescript
try {
  const { data, error } = await supabase
    .from('table')
    .select()
    
  if (error) throw error
  return data
} catch (error) {
  console.error('Supabase error:', error)
  // Handle gracefully
}
```