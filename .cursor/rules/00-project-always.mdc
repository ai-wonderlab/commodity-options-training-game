# Commodity Options Training Game - Core Rules
alwaysApply: true

## NORTH STAR (Acceptance Contract)
This is a desktop-first, browser-only training game for ICE Brent options trading education.

### Core Requirements
- **Pricing Model**: Black-76 (European options)
- **Greeks**: Δ, Γ, Vega, Θ (finite difference), Vanna/Vomma (read-only)
- **Data**: 15-minute delayed live + replay modes
- **Order Types**: Market/Limit with mid±spread fills
- **Risk Management**: Risk caps + VaR(95%), allow-but-penalize breaches
- **Scoring**: Risk-adjusted (realized P&L - penalties)
- **Capacity**: 25 concurrent players per session
- **Deployment**: GitHub Pages (static) + Supabase EU

### Technical Standards
- TypeScript strict mode
- Unit tests for all quant functions
- EU data residency only
- "Education only" compliance
- No real money trading
- 15-minute data delay attribution

## Code Standards

### TypeScript
```typescript
// Always use strict types
interface Position {
  strike: number;
  expiry: Date;
  optType: 'C' | 'P';
  quantity: number; // positive long, negative short
  contractMultiplier: number; // 1000 bbl
}
```

### Testing
- Test Black-76 against known values
- Test put-call parity invariant
- Test VaR monotonicity
- Test fill engine edge cases
- Test breach lifecycle

### Error Handling
- Never swallow errors silently
- Always provide user-friendly messages in Greek
- Log technical details to console
- Use toast notifications for user feedback

## Data Residency & Compliance

### EU Requirements
- Supabase region: EU (Frankfurt/Dublin)
- No data transfer outside EU
- GDPR compliant data handling
- Right to deletion support

### Educational Compliance
- Always show "Education Only" banner
- Display "Not Investment Advice" disclaimer
- Show "15-minute delayed data" notice
- No real money references
- No trading recommendations

## Architecture Principles

### Frontend (Next.js)
- Static Site Generation (SSG) for GitHub Pages
- Client-side only for dynamic data
- Use Supabase Realtime for live updates
- Optimistic UI updates
- Progressive enhancement

### Backend (Supabase)
- Edge Functions for API logic
- RLS policies for data security
- Realtime channels for broadcasting
- PostgreSQL for persistence
- Service role only from Edge Functions

### Performance
- Batch database operations
- Use indexes on frequent queries
- Cache IV surfaces
- Throttle realtime updates to 1/sec
- Limit replay speed to 8x

## Security

### Authentication
- SSO only (Google/Microsoft)
- First user becomes instructor
- Session-based access control
- JWT validation in Edge Functions

### Data Access
- RLS enabled on all tables
- Participants see own data only
- Instructors see all session data
- No direct database access from client

## User Experience

### Language
- Primary UI in Greek
- Technical terms can remain in English
- Error messages in Greek
- Numbers use US format (. for decimal)

### Responsiveness
- Desktop-first design
- Minimum 1280px width
- Touch-friendly controls
- Keyboard shortcuts for trading

### Feedback
- Immediate order confirmation
- Live P&L updates
- Visual breach indicators
- Sound alerts for critical events